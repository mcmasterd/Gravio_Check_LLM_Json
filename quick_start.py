#!/usr/bin/env python3
"""
Quick Start Script cho Shopify MCP Workflow (Rebuilt System)

Script ƒë∆°n gi·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng h·ªá th·ªëng rebuild:
1. Setup v√† test connections  
2. Process data t·ª´ Google Sheets
3. View results
4. Launch new processor

T∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng rebuild m·ªõi
"""

import os
import sys
import time
import subprocess
from pathlib import Path
from typing import Optional

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    # Import t·ª´ h·ªá th·ªëng m·ªõi
    from services.service_container import ServiceContainer
    from services.google_sheets_service import GoogleSheetsService
    from models.data_models import BatchJob
    NEW_SYSTEM_AVAILABLE = True
except ImportError:
    NEW_SYSTEM_AVAILABLE = False

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table

console = Console()

class QuickStart:
    """Quick start helper cho ng∆∞·ªùi d√πng m·ªõi - Rebuild Compatible"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o quick start v·ªõi h·ªá th·ªëng m·ªõi"""
        self.config_file = "config/settings.yaml"
        self.service_container = None
        self.sheets_service = None
        
        console.print("üöÄ Shopify MCP Quick Start (Rebuild Compatible)", style="bold blue")
    
    def run(self):
        """Main quick start flow v·ªõi h·ªá th·ªëng m·ªõi"""
        try:
            # Welcome message
            self._show_welcome()
            
            # Check system compatibility
            if not self._check_system_compatibility():
                return False
            
            # Step 1: Initialize v√† test connections
            if not self._step_1_initialize():
                return False
            
            # Step 2: Choose action
            action = self._step_2_choose_action()
            
            # Execute action
            if action == "1":
                self._action_test_system()
            elif action == "2":
                self._action_process_data()
            elif action == "3":
                self._action_view_results()
            elif action == "4":
                self._action_new_processor()
            elif action == "5":
                self._action_help()
            else:
                console.print("üëã Goodbye!", style="yellow")
                
        except KeyboardInterrupt:
            console.print("\n‚èπÔ∏è Interrupted by user", style="yellow")
        except Exception as e:
            console.print(f"üí• Error: {e}", style="red")
            return False
        
        return True
    
    def _check_system_compatibility(self) -> bool:
        """Ki·ªÉm tra t√≠nh t∆∞∆°ng th√≠ch c·ªßa h·ªá th·ªëng"""
        if not NEW_SYSTEM_AVAILABLE:
            console.print("‚ö†Ô∏è H·ªá th·ªëng m·ªõi ch∆∞a s·∫µn s√†ng, s·ª≠ d·ª•ng processor.py thay th·∫ø", style="yellow")
            console.print("üí° Vui l√≤ng ch·∫°y: python processor.py --test", style="cyan")
            return False
        
        # Ki·ªÉm tra file processor.py c√≥ t·ªìn t·∫°i
        if not Path("processor.py").exists():
            console.print("‚ùå processor.py kh√¥ng t√¨m th·∫•y", style="red")
            return False
            
        return True
    
    def _show_welcome(self):
        """Show welcome message cho h·ªá th·ªëng rebuild"""
        welcome_text = """
ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Shopify MCP Batch Processor (Rebuild)!

H·ªá th·ªëng m·ªõi n√†y cung c·∫•p:
‚Ä¢ Architecture clean v·ªõi dependency injection
‚Ä¢ 100% success rate (c·∫£i ti·∫øn t·ª´ 66.67%)
‚Ä¢ Performance t·ªëi ∆∞u: 77-81% data reduction
‚Ä¢ Filter mapping th√¥ng minh

ƒêi·ªÉm m·ªõi: processor.py thay th·∫ø batch_processor.py
        """
        console.print(Panel(welcome_text.strip(), title="üéØ Welcome to New System", border_style="green"))
    
    def _step_1_initialize(self) -> bool:
        """Initialize v√† test connections v·ªõi h·ªá th·ªëng m·ªõi"""
        console.print("\nüì° Step 1: Initializing new system...", style="yellow")
        
        try:
            # Initialize service container
            console.print("‚Ä¢ Loading configuration...")
            if NEW_SYSTEM_AVAILABLE:
                self.service_container = ServiceContainer()
                self.sheets_service = self.service_container.google_sheets
                
                console.print("‚Ä¢ Testing connections...")
                # Simple test b·∫±ng c√°ch get sheet info
                sheet_info = self.sheets_service.get_sheet_info()
                console.print(f"‚úÖ Connected to sheet: {sheet_info.get('sheet_name', 'Unknown')}", style="green")
                return True
            else:
                console.print("‚ùå New system not available", style="red")
                return False
                    
        except Exception as e:
            console.print(f"‚ùå Initialization failed: {e}", style="red")
            return False
    
    def _step_2_choose_action(self) -> str:
        """Choose action to perform"""
        console.print("\nüéØ Step 2: Choose an action", style="yellow")
        
        # Create menu table
        table = Table(title="Available Actions")
        table.add_column("Option", style="cyan", width=8)
        table.add_column("Action", style="white", width=25)
        table.add_column("Description", style="dim", width=40)
        
        table.add_row("1", "üß™ Test System", "Test processor.py connections")
        table.add_row("2", "‚öôÔ∏è Process Data", "Run processor.py for data processing")
        table.add_row("3", "üìä View Results", "View recent processing results")
        table.add_row("4", "ÔøΩ New Processor", "Launch processor.py with options")
        table.add_row("5", "üí° Help", "Show migration guide & commands")
        table.add_row("6", "üö™ Exit", "Exit the application")
        
        console.print(table)
        
        # Get user choice
        choice = Prompt.ask(
            "Select an option",
            choices=["1", "2", "3", "4", "5", "6"],
            default="1"
        )
        
        return choice
    
    def _action_test_system(self):
        """Action: Test h·ªá th·ªëng m·ªõi v·ªõi processor.py"""
        console.print(Panel("üß™ Testing New System with processor.py", border_style="blue"))
        
        try:
            console.print("üîÑ Running processor.py --test...", style="yellow")
            
            # Run processor.py --test
            result = subprocess.run(
                [sys.executable, "processor.py", "--test"],
                capture_output=True,
                text=True,
                cwd="."
            )
            
            if result.returncode == 0:
                console.print("‚úÖ processor.py test successful!", style="green")
                # Show last few lines of output
                output_lines = result.stdout.strip().split('\n')
                for line in output_lines[-5:]:
                    if line.strip():
                        console.print(f"  {line}")
            else:
                console.print("‚ùå processor.py test failed", style="red")
                console.print(f"Error: {result.stderr}")
                
        except Exception as e:
            console.print(f"‚ùå Test failed: {e}", style="red")
    
    def _action_upload_csv(self):
        """Action: Upload CSV files"""
        console.print(Panel("üì§ Upload CSV Files", border_style="green"))
        
        try:
            # Get input path
            input_path = Prompt.ask(
                "Enter CSV file or directory path",
                default="data/input"
            )
            
            if not Path(input_path).exists():
                console.print(f"‚ùå Path not found: {input_path}", style="red")
                return
            
            # Options
            clear_existing = Confirm.ask("Clear existing data in sheet?", default=False)
            avoid_duplicates = Confirm.ask("Avoid duplicate entries?", default=True)
            
            # Upload
            if Path(input_path).is_file():
                # Single file
                result = self.batch_processor.upload_csv_to_sheet(
                    csv_file=input_path,
                    clear_existing=clear_existing,
                    avoid_duplicates=avoid_duplicates
                )
                console.print(f"Upload result: {result['status']}")
                if result['status'] == 'success':
                    console.print(f"‚úÖ Uploaded {result['uploaded_rows']} rows")
            else:
                # Directory
                results = self.batch_processor.upload_multiple_csvs(
                    csv_directory=input_path,
                    avoid_duplicates=avoid_duplicates
                )
                successful = [r for r in results if r['status'] == 'success']
                console.print(f"‚úÖ {len(successful)} files uploaded successfully")
                
        except Exception as e:
            console.print(f"‚ùå Upload failed: {e}", style="red")
    
    def _action_process_data(self):
        """Action: Process data v·ªõi processor.py"""
        console.print(Panel("‚öôÔ∏è Process Data with processor.py", border_style="blue"))
        
        try:
            # Processing options
            start_row = Prompt.ask("Start row (default: 2)", default="2")
            end_row = Prompt.ask("End row (press Enter for all)", default="")
            skip_processed = Confirm.ask("Skip already processed rows?", default=True)
            
            # Build command
            cmd = [sys.executable, "processor.py"]
            
            if start_row.strip():
                cmd.extend(["--start-row", start_row])
            
            if end_row.strip():
                cmd.extend(["--end-row", end_row])
            
            if skip_processed:
                cmd.append("--skip-processed")
            
            console.print(f"üîÑ Running: {' '.join(cmd)}", style="yellow")
            
            # Execute processor.py
            result = subprocess.run(cmd, cwd=".")
            
            if result.returncode == 0:
                console.print("‚úÖ Processing completed successfully!", style="green")
            else:
                console.print("‚ùå Processing failed", style="red")
                
        except Exception as e:
            console.print(f"‚ùå Processing failed: {e}", style="red")
    
    def _action_new_processor(self):
        """Action: Launch processor.py v·ªõi options"""
        console.print(Panel("üöÄ Launch New Processor", border_style="purple"))
        
        console.print("üìã Available processor.py commands:")
        console.print("‚Ä¢ python processor.py --test                    # Test all services")
        console.print("‚Ä¢ python processor.py --start-row 2             # Process from row 2")
        console.print("‚Ä¢ python processor.py --start-row 2 --end-row 10 # Process range")
        console.print("‚Ä¢ python processor.py --skip-processed          # Skip processed rows")
        
        if Confirm.ask("\nLaunch processor.py --test?"):
            try:
                subprocess.run([sys.executable, "processor.py", "--test"], cwd=".")
            except Exception as e:
                console.print(f"‚ùå Could not launch processor.py: {e}", style="red")
    
    def _action_help(self):
        """Action: Show migration guide"""
        console.print(Panel("üí° Migration Guide", border_style="cyan"))
        
        console.print("ÔøΩ Command Migration t·ª´ Old ‚Üí New System:")
        console.print("")
        
        migration_table = Table(title="Command Mapping")
        migration_table.add_column("Old Command", style="red")
        migration_table.add_column("New Command", style="green")
        migration_table.add_column("Notes", style="dim")
        
        migration_table.add_row(
            "python quick_start.py",
            "python processor.py --test",
            "Test connections"
        )
        migration_table.add_row(
            "python batch_processor.py --sheet",
            "python processor.py --start-row 2",
            "Process data"
        )
        migration_table.add_row(
            "python batch_processor.py --test",
            "python processor.py --test",
            "System testing"
        )
        
        console.print(migration_table)
        console.print("\nüìö Xem README.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ h·ªá th·ªëng m·ªõi")
    
    def _action_view_results(self):
        """Action: View recent results"""
        console.print(Panel("üìä View Recent Results", border_style="cyan"))
        
        try:
            # Check for recent checkpoints
            checkpoint_dir = Path("data/output/checkpoints")
            if checkpoint_dir.exists():
                checkpoint_files = list(checkpoint_dir.glob("*.json"))
                if checkpoint_files:
                    # Sort by modification time
                    checkpoint_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                    
                    console.print(f"Found {len(checkpoint_files)} recent jobs:")
                    for i, file in enumerate(checkpoint_files[:5]):  # Show last 5
                        mtime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(file.stat().st_mtime))
                        console.print(f"  {i+1}. {file.stem} - {mtime}")
                else:
                    console.print("No recent jobs found")
            else:
                console.print("No checkpoint directory found")
            
            # Check Google Sheets
            try:
                sheet_info = self.batch_processor.sheets_service.get_sheet_info()
                console.print(f"\nüìä Google Sheet: {sheet_info.get('sheet_name', 'Unknown')}")
                console.print(f"Sheet ID: {sheet_info.get('sheet_id', 'Unknown')}")
            except Exception as e:
                console.print(f"‚ö†Ô∏è Could not get sheet info: {e}")
                
        except Exception as e:
            console.print(f"‚ùå Failed to view results: {e}", style="red")
    
    def _action_advanced_mode(self):
        """Action: Launch Advanced Mode (batch_processor.py)"""
        console.print(Panel("üîß Advanced Mode", border_style="purple"))
        
        console.print("üìã Advanced Mode provides full CLI control with batch_processor.py")
        console.print("\nAvailable advanced commands:")
        console.print("‚Ä¢ python batch_processor.py --upload FILE      # Upload CSV")
        console.print("‚Ä¢ python batch_processor.py --sheet            # Process from sheet")
        console.print("‚Ä¢ python batch_processor.py --test             # Test connections")
        console.print("‚Ä¢ python batch_processor.py --help             # See all options")
        
        if Confirm.ask("\nLaunch batch_processor.py help?"):
            try:
                import subprocess
                subprocess.run([sys.executable, "batch_processor.py", "--help"], cwd=".")
            except Exception as e:
                console.print(f"‚ùå Could not launch batch_processor.py: {e}", style="red")
                console.print("üí° Try running: python batch_processor.py --help", style="cyan")

def main():
    """Main entry point"""
    try:
        quick_start = QuickStart()
        success = quick_start.run()
        
        if success:
            console.print("\nüéâ Quick start completed successfully!", style="green")
        else:
            console.print("\n‚ö†Ô∏è Quick start completed with issues", style="yellow")
            
    except Exception as e:
        console.print(f"\nüí• Quick start failed: {e}", style="red")
        sys.exit(1)

if __name__ == "__main__":
    main()
